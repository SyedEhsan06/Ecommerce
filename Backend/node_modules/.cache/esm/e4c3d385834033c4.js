let CustomErrorHandler,User,Joi,bcrypt,jwtService;_834‍.x([["default",()=>_834‍.o]]);_834‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_834‍.w("../../models",[["User",["User"],function(v){User=v}]]);_834‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_834‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_834‍.w("../../services/JwtService",[["default",["jwtService"],function(v){jwtService=v}]]);




const loginController = {
  async login(req, res, next) {
    const loginSchema = Joi.object({
      email: Joi.string().email().required(),
      password: Joi.string()
        .pattern(new RegExp("^[a-zA-Z0-9]{3,30}$"))
        .required(),
    });

    const { error } = loginSchema.validate(req.body);
    if (error) {
      return next(error);
    }
    try {
      const user = await User.findOne({ email: req.body.email });
      if (!user) {
        return next(CustomErrorHandler.invalidCredentials());
      }
      const match = await bcrypt.compare(req.body.password, user.password);
      if (!match) {
        return next(CustomErrorHandler.invalidCredentials());
      }

      const access_token = jwtService.sign({ _id: user.id, role: user.role });
      res.json({ access_token: access_token });
    } catch (err) {
      return next(err);
    }
  },
};

_834‍.d(loginController);
