let CustomErrorHandler,Joi,bcrypt,jwtService,User;_212‍.x([["default",()=>_212‍.o]]);_212‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_212‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_212‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_212‍.w("../../services/JwtService",[["default",["jwtService"],function(v){jwtService=v}]]);_212‍.w("../../models",[["User",["User"],function(v){User=v}]]);





const registerController = {
  async register(req, res, next) {
    const registerSchema = Joi.object({
      name: Joi.string().min(3).max(20).required(),
      email: Joi.string().email().required(),
      password: Joi.string()
        .pattern(new RegExp("^[a-zA-Z0-9]{3,30}$"))
        .required(),
      repeat_password: Joi.ref("password"),
    });
    _212‍.g.console.log(req.body);
    const { error } = registerSchema.validate(req.body);

    if (error) {
      return next(error);
    }

    //USER ALREADY REGISTERED

    try {
      const exist = await User.exists({ email: req.body.email });
      if (exist) {
        return next(
          CustomErrorHandler.alreadyExist("This Email Is Already Taken")
        );
      }
    } catch (error) {
      return next(error);
    }
    //Hashing Password
    const { name, email, password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    
    //Models
    const user = new User({
      name: name,
      email: email,
      password: hashedPassword,
    });
let access_token;
    try {
      const result = await user.save();

    access_token = jwtService.sign({
        _id: result.id,
        role: result.role,
      });
    } catch (err) {
      return next(err);
    }

    res.json({access_token:access_token});
  },
};

_212‍.d(registerController);
