let CustomErrorHandler,jwtService;_db5‍.x([["default",()=>_db5‍.o]]);_db5‍.w("../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_db5‍.w("../services/JwtService",[["default",["jwtService"],function(v){jwtService=v}]]);


const auth = async (req, res, next) => {
  let authHeader = req.headers.Authorization;

  _db5‍.g.console.log(authHeader);

  if (!authHeader) {
    return next(CustomErrorHandler.unAuthorized());
  }
  const token = authHeader;
  try {
    const { _id, role } = await jwtService.verify(token);
    req.user = {
      _id: _id,
      role: role,
    };
    req.user = user;
  } catch (err) {
    return next(CustomErrorHandler.unAuthorized);
  }
};

_db5‍.d(auth);
